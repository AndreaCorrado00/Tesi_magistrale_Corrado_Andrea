function show_TM_analysis(record_id,data,env_dataset,TM_dataset,fc,saving_plot,figure_path)

%% Data informations
map="MAP_"+record_id(1);
sub=map+num2str(record_id(2));
h=double(record_id(3));
signal = data.(map).(sub).rov_trace{:,h};
example_env = env_dataset.(map).(sub).rov_trace{:,h};
example_corr=TM_dataset.(map).(sub).rov_trace{:,h};



% plot elements

sub_num = split(sub,'_');
sub_num = split(sub_num{2},record_id(1));
sub_num = sub_num{end};

% % Create a new figure
if saving_plot
    screenSize = get(0, 'ScreenSize');
    fig = figure('Visible', 'off');
    fig.Position = [0, 0, screenSize(3), screenSize(4)];
else
    fig = figure;
    fig.WindowState = "maximized";
end

sgtitle(["Example of TM analysis for: MAP "+record_id(1)+", sub: "+sub_num+", record: "+num2str(h)])

%% 0: finding the atrial peak using the envelope
[start_end_areas]=find_atrial_ventricular_areas(signal,example_env,fc);

t_atr_start=start_end_areas(1,1);
t_atr_end=start_end_areas(1,2);

atr_phase_presence=true;
if isnan(t_atr_start) || isnan(t_atr_end)
    atr_phase_presence=false;
    t_atr_start=1;
    t_atr_end=length(signal);
    disp("No atrial phase detected for "+sub+"-"+num2str(h))
else
    example_corr=nan(length(signal),1);
    % what if correlation is evaluate after windowing?
    % 1. Define the template (biphasic)
    T=0.05;
    N = round(T * fc);  % Number of samples in the template


    t_template = linspace(0, T, N);

    signal_example=signal(t_atr_start:t_atr_end);
    norm_signal = sqrt(sum(signal_example.^2));
    signal_example=signal_example/norm_signal;
    signal_example=movmean(signal_example,50);
    % amplitude = max(abs(signal_example));
    template =  sin(2 * pi * 1/T *t_template); % Biphasic siusoid template
    norm_template = sqrt(sum(template.^2));
    template=template/norm_template;
    corr = conv(signal_example, flip(template), 'same');  % Convolution (cross-correlation)
    example_corr(t_atr_start=movmean(corr,50);
end

x = [0:1/fc:1-1/fc]';
subplot(2,2,1)
plot(x,signal,"LineWidth",0.8,"Color","#4DBEEE")
hold on
% Plotting of the corr signal windowed into atrial phase
plot(x(t_atr_start:t_atr_end),example_corr(t_atr_start:t_atr_end),"LineWidth",1.2,"Color","#0072BD")
% Plot vertical dashed lines for atrial phase
if atr_phase_presence
    for k = 1
        % Convert index positions to time
        start_time = t_atr_start / fc; % Start index converted to time
        end_time = t_atr_end / fc;   % End index converted to time

        % Plot vertical dashed line for the start of the peak (green)
        plot([start_time, start_time], ylim, '--', 'LineWidth', 0.2, 'Color', [0, 0.5, 0]);
        % Plot vertical dashed line for the end of the peak (red)
        plot([end_time, end_time], ylim, '--', 'LineWidth', 0.2, 'Color', [0.5, 0, 0]);
    end
end



%% 1. Derivative of the correlation signal: how many peaks into the atrial phase?
% For a map A just one peak is expected.
% computing derivation
example_corr=movmean(example_corr,70);

d_corr=diff(example_corr);
d_corr=[d_corr;nan];
d_corr=movmean(d_corr,100);

% removing edges
d_corr(1:t_atr_start)=nan;
d_corr(t_atr_end:end)=nan;

d_corr=d_corr-mean(d_corr,"omitnan");

% threshold definition
mult_factor=0.1;
th_upper=abs(max(d_corr,[],"omitnan"));
th_upper=th_upper*mult_factor;
th_lower=min(d_corr,[],"omitnan");
th_lower=th_lower*mult_factor;

% plotting
plot(x,d_corr*max(signal,[],"omitnan")/max(d_corr),"LineWidth",1.5,"Color","#7E2F8E")
plot(x(t_atr_start:t_atr_end),th_upper*max(signal,[],"omitnan")/max(d_corr)*ones(length(x(t_atr_start:t_atr_end)),1),"r","LineWidth",1)
plot(x(t_atr_start:t_atr_end),th_lower*max(signal,[],"omitnan")/max(d_corr)*ones(length(x(t_atr_start:t_atr_end)),1),"r","LineWidth",1)
title('Step 1: TM record derivative windowed')
legend(["Signal","TM record","start atr phase","end atr phase","d_{TMrecord}/dt"])
xlabel('time [s]')
ylabel('Amplitude [mV]')

%% 2. map creation
% Plotting
subplot(2,2,2)
plot(x,signal,"LineWidth",0.8,"Color","#4DBEEE")
hold on

if atr_phase_presence
    map_upper=d_corr>th_upper;
    map_lower=d_corr<th_lower;
    plot(x(t_atr_start:t_atr_end),example_corr(t_atr_start:t_atr_end)*max(signal(t_atr_start:t_atr_end),[],"omitnan")/max(example_corr(t_atr_start:t_atr_end)),"LineWidth",1.5,"Color","#0072BD")
    plot(x, map_upper * min([1, 1/max(signal, [], "omitnan"), max(signal, [], "omitnan")]), "LineWidth", 1.2, "Color", "#A2142F")
    plot(x, -map_lower * abs(max([-1, 1/min(signal, [], "omitnan"), min(signal, [], "omitnan")])), "LineWidth", 1.2, "Color", "#7E2F8E")
    title('Step 2: derivative thresholding')
    legend(["Signal","TM record","d_{TMrecord}/dt >0","d_{TMrecord}/dt <0"])

end
xlabel('time [s]')
ylabel('Amplitude [mV]')

%% 3. Map merge
% Ensure the combined map starts with a run in map_upper
if atr_phase_presence

    
    % Find runs in map_upper and map_lower
    runs_upper = find(diff([0; map_upper]) == 1);  % Indices of the start of runs in map_upper
    runs_lower = find(diff([0; map_lower]) == 1);  % Indices of the start of runs in map_lower
    % Remove runs in map_upper not followed by a run in map_lower
    if length(runs_lower)<length(runs_upper)
    for i = 1:length(runs_upper)
        % End of the current run in map_upper
        end_upper = find(map_upper(runs_upper(i):end) == 0, 1) + runs_upper(i) - 1;

        % Check if there is a run in map_lower after the current run in map_upper
        following_lower = runs_lower(min([i, length(runs_lower)])); % Find the next run start in map_lower after end_upper
        next_upper = runs_upper(min([i+1, length(runs_upper)]));

        % If no run in map_lower follows this run in map_upper, remove the run
        if next_upper < following_lower
            map_upper(runs_upper(i):end_upper) = 0;  % Remove the run in map_upper
        end
    end
    end
    % Remove runs in map_lower not preceded by a run in map_upper
    if length(runs_lower)>length(runs_upper)
    for i = 1:length(runs_lower)
        % Start of the current run in map_lower
        start_lower = runs_lower(i);

        % Find the end of the current run in map_lower
        end_lower = find(map_lower(start_lower:end) == 0, 1) + start_lower - 1;

        % Check if there is a run in map_lower after the current run in map_upper
        next_lower = runs_lower(min([i+1, length(runs_lower)]));
        next_upper = runs_upper(min([i+1, length(runs_upper)]));

        % If no run in map_lower follows this run in map_upper, remove the run
        if next_upper > next_lower
            map_lower(runs_lower(i):end_lower) = 0;  % Remove the run in map_lower
        end
    end
    end
    % Ensure the combined map starts with a run in map_upper
    first_upper = find(map_upper, 1, 'first');
    first_lower = find(map_lower, 1, 'first');

    if isempty(first_upper) || (~isempty(first_lower) && first_lower < first_upper)
        % If map_lower starts before map_upper, set map_lower to 0 before the first map_upper
        map_lower(1:first_upper-1) = 0;
    end

    % Ensure the combined map ends with a run in map_lower
    last_lower = find(map_lower, 1, 'last');
    last_upper = find(map_upper, 1, 'last');

    if isempty(last_lower) || (~isempty(last_upper) && last_upper > last_lower)
        % If map_upper ends after map_lower, set map_upper to 0 after the last map_lower
        map_upper(last_lower+1:end) = 0;
    end

end






% Plotting
subplot(2,2,3)
plot(x,signal,"LineWidth",0.8,"Color","#4DBEEE")
hold on

if atr_phase_presence
    plot(x(t_atr_start:t_atr_end),example_corr(t_atr_start:t_atr_end)*max(signal(t_atr_start:t_atr_end),[],"omitnan")/max(example_corr(t_atr_start:t_atr_end)),"LineWidth",1.5,"Color","#0072BD")
    plot(x, map_upper * min([1, 1/max(signal, [], "omitnan"), max(signal, [], "omitnan")]), "LineWidth", 1.2, "Color", "#A2142F")
    plot(x, -map_lower * abs(max([-1, 1/min(signal, [], "omitnan"), min(signal, [], "omitnan")])), "LineWidth", 1.2, "Color", "#7E2F8E")
    title('Step 3: map correction')
    legend(["Signal","TM record","d_{TMrecord}/dt >0","d_{TMrecord}/dt <0"])
end

xlabel('time [s]')
ylabel('Amplitude [mV]')


%% 4. Number of (positive) peaks into atrial phase
if atr_phase_presence
    N_positive_corr_peaks=numel(regionprops(map_upper, 'PixelIdxList'));
else
    N_positive_corr_peaks=0;
end

% Plotting
subplot(2,2,4)
plot(x,signal,"LineWidth",0.8,"Color","#4DBEEE")
hold on
plot(x(t_atr_start:t_atr_end),example_corr(t_atr_start:t_atr_end)*max(signal(t_atr_start:t_atr_end),[],"omitnan")/max(example_corr(t_atr_start:t_atr_end)),"LineWidth",1.5,"Color","#0072BD")
% Plot vertical dashed lines for atrial phase

if atr_phase_presence
    for k = 1
        % Convert index positions to time
        start_time = t_atr_start / fc; % Start index converted to time
        end_time = t_atr_end / fc;   % End index converted to time

        % Plot vertical dashed line for the start of the peak (green)
        plot([start_time, start_time], ylim, '--', 'LineWidth', 0.2, 'Color', [0, 0.5, 0]);
        % Plot vertical dashed line for the end of the peak (red)
        plot([end_time, end_time], ylim, '--', 'LineWidth', 0.2, 'Color', [0.5, 0, 0]);
    end
    legend(["Signal","TM record","start atr phase","end atr phase"])

else
    
end

title("Step 4: atrial correlation peaks count: "+num2str(N_positive_corr_peaks))

xlabel('time [s]')
ylabel('Amplitude [mV]')
%% possible saving plot
% Save the plot
if saving_plot
    file_name = sub+ '_record_' + num2str(h) + '_';
    save_plot(file_name,"example_analysis", figure_path, fig, true);
end
