function new_time_thresholds=clean_time_thresholds(rov_signal,time_th,fc,K)

[N,~]=size(time_th);

%% Iterative process to assess true peak presence
stop=false;

% Initialization 
start_time=round(fc*0.10); % initial time of evaluation of peaks
end_time=round(fc*0.7); % end time
N_start=N; % Initial number of active areas detected
time_th_start=time_th; %initial time thresholds
% Iteration
while ~stop
    mask = true(size(rov_signal)); 
    for i = 1:N_start
        mask(time_th_start(i,1):time_th_start(i,2)) = false;
    end

    % Inactive signal 
    signal_inactive_phase = rov_signal(start_time:end_time); 
    signal_inactive_phase = signal_inactive_phase(mask(start_time:end_time));

    % Threshold definition
    std_noise_estimated=std(signal_inactive_phase);
    Threshold=K*std_noise_estimated; 

    not_significative_peaks_positions=zeros(N_start,1);
    disp(variance)
    for i =1:N_start
        disp([ max(abs(rov_signal(time_th_start(i,1):time_th_start(i,2)))),Threshold])
        if max(abs(rov_signal(time_th_start(i,1):time_th_start(i,2))))<Threshold
            % peak is not significative, thus must be removed -> labelling
           not_significative_peaks_positions(i)=1;
        end
    end

    % How many peaks will remain?
    number_of_significative_peaks=N_start-sum(not_significative_peaks_positions);

    disp("  removed "+num2str(sum(not_significative_peaks_positions))+" peaks out of "+num2str(N_start))
    % False positive peaks removal 
    time_th_start(not_significative_peaks_positions == 1, :) = [];
    N_start = size(time_th_start, 1); % Update the number of active peaks

    % Have been dropped peaks? If no it's time to stop
    if N_start==number_of_significative_peaks
        stop=true;
    end

    if N_start==0
        disp('Destroyed everything!')
    end


end

new_time_thresholds=time_th_start;


