function envelope_features = build_features_set(data, env_data, TM_data, fc)

% Initialize a cell array to store rows of the feature table
features_rows = [];

% Loop through each map type: MAP_A, MAP_B, MAP_C
for i = ["A", "B", "C"]
    map = 'MAP_' + i;
    subjects = fieldnames(data.(map));

    % Loop through each subject
    for j = 1:length(subjects)
        sub = subjects{j};

        % Get the number of signals for the current subject
        [~, N] = size(data.(map).(sub).rov_trace);

        sub_num=split(sub,'_');
        sub_num=split(sub_num{2},i);
        sub_num=sub_num{end};
        for h = 1:N
            % Extract the rov_trace signal and its corresponding envelope
            example_rov = data.(map).(sub).rov_trace{:,h};
            example_env = env_data.(map).(sub).rov_trace{:,h};
            example_corr=TM_data.(map).(sub).rov_trace{:,h};
            T=TM_data.T;

            disp([sub+"-"+num2str(h)])

            %% Computing features
            %% Envelope
            % disp([sub+"-"+num2str(h)])
            [n_peaks,env_peak1_pos,env_peak2_pos,env_peak3_pos,env_peak1_val,env_peak2_val,env_peak3_val,...
                peak1_pos,peak2_pos,peak3_pos,peak1_val,peak2_val,peak3_val,...
                duration,silent_phase,silent_rateo,atrial_ventricular_ratio,...
                atrial_ventricular_time_ratio,third_major_ratio,...
                third_second_ratio,n_peaks_duration_ratio] = compute_envelope_features(example_env, example_rov, fc);

            %% Template matching
            record_id=[i,sub_num,h];
            [cross_peak,cross_peak_pos,corr_energy,...
                N_atr_corr_peaks,atr_cross_peak,atr_corr_energy,...
                N_vent_corr_peaks,vent_cross_peak,vent_corr_energy,...
                cross_atr_vent_ratio,cross_atr_abs_max_ratio,cross_vent_abs_max_ratio,...
                energy_cross_atr_vent_ratio,energy_cross_atr_abs_max_ratio,energy_cross_vent_abs_max_ratio]=compute_TM_features(record_id,data, env_data,example_corr,T, fc);

            % Save the computed features as strings (to handle NaN values)
            feature_row = {
                string(sub_num),...
                string(n_peaks), string(env_peak1_pos), string(env_peak2_pos), string(env_peak3_pos), ...
                string(env_peak1_val), string(env_peak2_val), string(env_peak3_val),...
                string(peak1_pos), string(peak2_pos), string(peak3_pos), ...
                string(peak1_val), string(peak2_val), string(peak3_val), ...
                string(duration), string(silent_phase), string(silent_rateo), ...
                string(atrial_ventricular_ratio),string(atrial_ventricular_time_ratio),...
                string(third_major_ratio),string(third_second_ratio), string(n_peaks_duration_ratio), ...
                string(cross_peak),string(cross_peak_pos),string(corr_energy),...
                string(N_atr_corr_peaks),string(atr_cross_peak),string(atr_corr_energy),...
                string(N_vent_corr_peaks),string(vent_cross_peak),string(vent_corr_energy),...
                string(cross_atr_vent_ratio),string(cross_atr_abs_max_ratio),string(cross_vent_abs_max_ratio),...
                string(energy_cross_atr_vent_ratio),string(energy_cross_atr_abs_max_ratio),energy_cross_vent_abs_max_ratiomap % Add the "class" column with the map identifier
            };

            % Append the current row to the dataset
            features_rows = [features_rows; feature_row];
        end
    end
end

% Create the final table with column names
envelope_features = cell2table(features_rows, ...
    'VariableNames', {'id','N_peaks', 'env_peak1_pos', 'env_peak2_pos', 'env_peak3_pos','env_peak1_val', 'env_peak2_val', 'env_peak3_val', ...
    'peak1_pos', 'peak2_pos', 'peak3_pos','peak1_val', 'peak2_val', 'peak3_val',...
    'duration', 'silent_phase', ...
    'silent_rateo', 'atrial_ventricular_ratio', 'atrial_ventricular_time_ratio',...
    'third_major_ratio','third_second_ratio','n_peaks_duration_rateo',...
    'cross_peak','cross_peak_pos','class'});

end
